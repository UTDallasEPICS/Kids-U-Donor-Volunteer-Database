generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Person {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  emailAddress String     @unique
  phoneNumber  String?    @unique
  Donors       Donor?
  Volunteers   Volunteer?
  Address      Address?
}

model Volunteer {
  id                        String           @id @default(uuid())
  dateOfBirth               DateTime
  age                       Int
  emergencyContact          String?
  eventsAttended            String
  agreementToMediaUse       Boolean?
  trainingCompletion        String?
  backgroundCheckCompletion Boolean?
  isOverEighteen            Boolean?
  personId                  String           @unique
  Person                    Person           @relation(fields: [personId], references: [id])
  VolunteerEvents           VolunteerEvent[]
}

model Grantor {
  id                          String           @id @default(uuid())
  websiteLink                 String?
  addressId                   String
  name                        String           @unique
  contactTitle                String
  type                        String
  communicationPreference     String
  internalRelationshipManager String
  Representative              Representative[]
  Address                     Address          @relation(fields: [id], references: [id])
  Person                      Person?
}

model Representative {
  id                  String                @id @default(uuid())
  FirstName           String
  LastName            String
  Email               String                @unique
  Phone               String?               @unique
  positionInCompany   String
  organizationId      String
  Organization        Organization          @relation(fields: [OrganizationID], references: [OrganizationID])
  RepresentativeGrant RepresentativeGrant[]
}

model Grant {
  id                      String   @id @default(uuid())
  name                    String   @unique
  status                  String
  amountRequested         Float
  amountAwarded           Float
  purpose                 String //look again
  startDate               DateTime
  endDate                 DateTime
  isMultipleYears         Boolean
  quarter                 String
  proposalSubmissionDate  DateTime
  awardNotificationDate   DateTime
  internalProposalDueDate DateTime
  proposalDueDate         DateTime
  proposalSummary         String
  applicationType         String
  internalOwner           String
  restriction             String?
  useArea                 String

  RepresentativeGrant RepresentativeGrant[]
}

model RepresentativeGrant {
  grantId          String
  representativeId String
  Grant            Grant          @relation(fields: [GrantID], references: [GrantID])
  Representative   Representative @relation(fields: [RepresentativeID], references: [ID])

  @@id([grantId, representativeId])
}

model Event {
  eventId            String           @id @default(uuid())
  nameOfEvent        String
  date               DateTime
  time               DateTime
  VolunteersAttended VolunteerEvent[]
}

model VolunteerEvent {
  id          String    @id @default(uuid())
  volunteerId String
  eventId     String
  loginTime   DateTime
  logoutTime  DateTime
  loggedHours Int
  Event       Event     @relation(fields: [EventID], references: [EventID])
  Volunteer   Volunteer @relation(fields: [VolunteerID], references: [VolunteerID])
}

// Donation Related
model Donor {
  id       String    @id @default(uuid())
  name     String
  type     String
  address  Address?
  phone    String
  email    String
  donation Donation?
  Person   Person    @relation(fields: [id], references: [ConstituentID])
}

model Address {
  id                  String  @id @default(uuid())
  addressLine1        String
  addressLine2        String
  city                String
  state               String
  zipCode             String
  donorId             String  @unique
  donor               Donor   @relation(fields: [donorId], references: [id])
  Person              Person? @relation(fields: [personConstituentID], references: [ConstituentID])
  personConstituentID String?
}

model Donation {
  id            String   @id @default(uuid())
  type          String
  amount        Float?
  item          String?
  itemValue     Float?
  paymentMethod String?
  campaign      String
  date          DateTime
  donorId       String   @unique
  donor         Donor    @relation(fields: [donorId], references: [id])
}
