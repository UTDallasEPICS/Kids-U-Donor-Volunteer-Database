generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

enum Role {
  VOLUNTEER
  ADMIN
}

model Person {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String          @unique
  phoneNumber    String?         @unique
  donor          Donor?
  representative Representative?
  address        Address?
  user           User?
}

model Organization {
  id           String   @id @default(uuid())
  name         String
  emailAddress String?  @unique
  address      Address?
  grantor      Grantor?
  donor        Donor?
}

model User {
  id       String  @id @default(uuid())
  role     Role
  personId String? @unique
  person   Person? @relation(fields: [personId], references: [id])
}

//Volunteer profile and Admin profile

model Address {
  id             String        @id @default(uuid())
  addressLine1   String
  addressLine2   String
  city           String
  state          String
  zipCode        String
  type           String
  personId       String?       @unique
  organizationId String?       @unique
  person         Person?       @relation(fields: [personId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

//Grant Related
model Grantor {
  id                          String           @id @default(uuid())
  type                        String
  websiteLink                 String?
  communicationPreference     String
  recognitionPreference       String
  internalRelationshipManager String
  organizationId              String           @unique
  organization                Organization     @relation(fields: [organizationId], references: [id])
  representative              Representative[]
}

model Representative {
  id                  String                @id @default(uuid())
  positionTitle       String
  personId            String                @unique
  grantorId           String
  person              Person                @relation(fields: [personId], references: [id])
  grantor             Grantor               @relation(fields: [grantorId], references: [id])
  representativeGrant RepresentativeGrant[]
}

model Grant {
  id                      String                @id @default(uuid())
  name                    String                @unique
  status                  String
  amountRequested         Float
  amountAwarded           Float                 @default(0)
  purpose                 String //specific area or general
  startDate               DateTime
  endDate                 DateTime
  isMultipleYears         Boolean
  quarter                 String
  acknowledgementSent     Boolean
  awardNotificationDate   DateTime?
  fundingArea             String //specific area or general
  internalProposalDueDate DateTime?
  proposalDueDate         DateTime
  proposalSummary         String
  proposalSubmissionDate  DateTime?
  applicationType         String
  internalOwner           String
  fundingRestriction      String?
  matchingRequirement     String?
  useArea                 String //specific area or general
  isEligibleForRenewal    Boolean
  renewalApplicationDate  DateTime?
  renewalAwardStatus      String?
  representativeGrant     RepresentativeGrant[]
  grantAttachment         GrantAttachment[]
}

model GrantAttachment {
  id       String @id @default(uuid())
  grantId  String
  document String
  Grant    Grant  @relation(fields: [grantId], references: [id])
}

model RepresentativeGrant {
  grantId          String
  representativeId String
  grant            Grant          @relation(fields: [grantId], references: [id])
  representative   Representative @relation(fields: [representativeId], references: [id])

  @@id([grantId, representativeId])
}

// Donation Related
model Donor {
  id                      String        @id @default(uuid())
  type                    String
  communicationPreference String
  status                  String
  notes                   String
  isRetained              Boolean
  personId                String?       @unique
  organizationId          String?       @unique
  donation                Donation[]
  person                  Person?       @relation(fields: [personId], references: [id])
  organization            Organization? @relation(fields: [organizationId], references: [id])
}

model Donation {
  id                  String   @id @default(uuid())
  type                String
  amount              Float
  item                String?
  paymentMethod       String?
  campaign            String?
  date                DateTime
  fundDesignation     String
  recurringFrequency  String
  source              String
  isMatching          Boolean
  receiptSent         Boolean
  receiptNumber       String   @default(uuid())
  taxDeductableAmount Float
  isAnonymous         Boolean
  acknowledgementSent Boolean
  donorId             String
  donor               Donor    @relation(fields: [donorId], references: [id])
}
