generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Constituent {
  ConstituentID String      @id @default(uuid())
  FirstName     String
  LastName      String
  StreetAddress String
  City          String
  State         String
  Zipcode       String
  Country       String
  EmailAddress  String      @unique
  PhoneNumber   String?     @unique
  AreaCode      String?
  Volunteers    Volunteer[]
}

model Volunteer {
  VolunteerID               String           @id @default(uuid())
  DOB                       DateTime
  Age                       Int
  EmergencyContact          String?
  EventsAttended            String[]
  AgreementToMediaUse       Boolean?
  TrainingCompletion        String?
  BackgroundCheckCompletion Boolean?
  IsOverEighteen            Boolean?
  ConstituentID             String
  Constituent               Constituent      @relation(fields: [ConstituentID], references: [ConstituentID])
  VolunteerEvents           VolunteerEvent[]
}

model Organization {
  OrganizationID            String           @id @default(uuid())
  WebsiteForFunder          String?
  StreetAddress             String
  City                      String
  State                     String
  Zipcode                   String
  Country                   String
  OrganizationName          String           @unique
  PortalForGrantApplication String?
  NotesAboutLoginInfo       String?
  Representative            Representative[]
}

model Representative {
  ID                String       @id @default(uuid())
  FirstName         String
  LastName          String
  Email             String       @unique
  Phone             String?      @unique
  PositionInCompany String
  OrganizationID    String
  Organization      Organization @relation(fields: [OrganizationID], references: [OrganizationID])
  Grants            Grant[]      @relation("GrantToRepresentative")
}

model Grant {
  GrantID                 String           @id @default(uuid())
  GrantName               String           @unique
  AwardStatus             String
  GrantDueDate            DateTime
  ContactType             String
  FundingAreas            String[]
  KidsUProgram            String[]
  GrantOpeningDates       DateTime[]
  AskDate                 DateTime?
  AwardDate               DateTime?
  ReportingDates          DateTime[]
  TypeOfReporting         String?
  DateToReapplyForGrant   DateTime?
  WaitingPeriodToReapply  Int?
  FundingRestrictions     String?
  AskAmount               Float
  AmountAwarded           Float
  EndOfGrantReportDueDate DateTime
  Representative          Representative[] @relation("GrantToRepresentative")
}

model Event {
  EventID            String           @id @default(uuid())
  NameOfEvent        String
  Date               DateTime
  Time               DateTime
  VolunteersAttended VolunteerEvent[]
}

model VolunteerEvent {
  ID          String    @id @default(uuid())
  VolunteerID String
  EventID     String
  LoginTime   DateTime
  LogoutTime  DateTime
  LoggedHours Int
  Event       Event     @relation(fields: [EventID], references: [EventID])
  Volunteer   Volunteer @relation(fields: [VolunteerID], references: [VolunteerID])
}

model Person {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String          @unique
  phoneNumber    String?         @unique
  donor          Donor?
  //representative Representative?
  address        Address?
  //user           User?
}

model Donor {
  id                      String     @id @default(uuid())
  type                    String
  communicationPreference String
  status                  String
  notes                   String
  isRetained              Boolean
  segment                 String?
  donation                Donation[]
  personId                String     @unique
  person                  Person     @relation(fields: [personId], references: [id])
}

model Address {
  id           String    @id @default(uuid())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  type         String
  personId     String    @unique
  person       Person    @relation(fields: [personId], references: [id])
  //Grantor      Grantor[]
}

model Donation {
  id                  String   @id @default(uuid())
  type                String
  amount              Float
  item                String?
  paymentMethod       String?
  campaign            String
  fundDesignation     String
  recurringFrequency  String
  date                DateTime
  source              String
  isMatching          Boolean
  receiptSent         Boolean
  receiptNumber       String   //@default(uuid())
  isAnonymous         Boolean
  acknowledgementSent Boolean
  donorId             String
  donor               Donor    @relation(fields: [donorId], references: [id])
}