generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Constituent {
  ConstituentID     String         @id @default(uuid())
  FirstName         String
  LastName          String
  StreetAddress     String
  City              String
  State             String
  Zipcode           String
  Country           String
  EmailAddress      String?
  PhoneNumber       String?
  AreaCode          String?
  CompanySchoolName String?
  donors            Donor[]
  volunteers        Volunteer[]
}

model Volunteer {
  VolunteerID         String           @id @default(uuid())
  DOB                 DateTime
  Age                 Int
  EmergencyContact    String?
  EventsAttended      String[]
  AgreementToMediaUse Boolean?
  TrainingCompletion  String?
  BackgroundCheckCompletion     Boolean?
  IsOverEighteen        Boolean?
  ConstituentID       String
  Constituent         Constituent      @relation(fields: [ConstituentID], references: [ConstituentID])
  VolunteerEvents     VolunteerEvent[]
}

model Donor {
  DonorID           String      @id @default(uuid())
  ContactPreference String?
  NotesResources    String?
  ConstituentID     String
  donations         Donation[]
  Constituent       Constituent @relation(fields: [ConstituentID], references: [ConstituentID])
}

model Donation {
  DonationID    String    @id @default(uuid())
  AmountDonated Float
  DateReceived  DateTime
  FundingAreas  String[]
  KidsUPrograms String[]
  DueDate       DateTime?
  DonorID       String
  Donor         Donor     @relation(fields: [DonorID], references: [DonorID])
}

model Organization {
  OrganizationID            String         @id @default(uuid())
  WebsiteForFunder          String?
  StreetAddress             String
  City                      String
  State                     String
  Zipcode                   String
  Country                   String
  CompanySchoolName         String?
  PortalForGrantApplication String?
  NotesAboutLoginInfo       String?
  representative            Representative[]
  
}

model Representative{
  RepresentativeID          String         @id @default(uuid())
  RepresentativeName        String[]
  RepresentativeEmail       String[]
  RepresentativePhone       String[]
  PositionInCompany         String[]
  grants                    Grant[]
  OrganizationID            String
  Organization              Organization  @relation(fields: [OrganizationID], references: [OrganizationID])
}

model Grant {
  GrantID                 String          @id @default(uuid())
  GrantName               String
  Years                   Int
  FundingAreas            String[]
  KidsUProgram            String[]
  GrantOpeningDates       DateTime[]
  AskDate                 DateTime?
  AwardDate               DateTime?
  ReportingDates          DateTime[]
  TypeOfReporting         String?
  DateToReapplyForGrant   DateTime?
  WaitingPeriodToReapply  Int?
  FundingRestrictions     String?
  AskAmount               Float
  AmountAwarded           Float
  EndOfGrantReportDueDate DateTime
  Representative          Representative[]
}

model Event {
  EventID            String             @id @default(uuid())
  NameOfEvent        String
  Date               DateTime
  Time               DateTime
  VolunteersAttended VolunteerEvent[]
}

model VolunteerEvent {
  ID          String      @id @default(uuid())
  VolunteerID String
  EventID     String
  LoginTime   DateTime
  LogoutTime  DateTime
  LoggedHours Int
  Event       Event     @relation(fields: [EventID], references: [EventID])
  Volunteer   Volunteer @relation(fields: [VolunteerID], references: [VolunteerID])
}

