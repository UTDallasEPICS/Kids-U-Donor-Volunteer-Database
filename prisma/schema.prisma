generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VOLUNTEER
  ADMIN
}

model Person {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String          @unique
  phoneNumber    String?         @unique
  address        Address?
  donor          Donor?
  representative Representative?
  user           User?
}

model Organization {
  id           String   @id @default(uuid())
  name         String
  emailAddress String?  @unique
  address      Address?
  grantor      Grantor?
  donor        Donor?
}

model User {
  id       String  @id @default(uuid())
  role     Role
  personId String? @unique
  person   Person? @relation(fields: [personId], references: [id])
}

//Volunteer profile and Admin profile

model Address {
  id             String        @id @default(uuid())
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  zipCode        String
  type           String
  personId       String?       @unique
  organizationId String?       @unique
  person         Person?       @relation(fields: [personId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

//Grant Related
model Grantor {
  id                          String           @id @default(uuid())
  type                        String
  websiteLink                 String?
  communicationPreference     String
  recognitionPreference       String
  internalRelationshipManager String
  organizationId              String           @unique
  deletedAt                   DateTime?
  status                      Boolean          @default(true)
  organization                Organization     @relation(fields: [organizationId], references: [id])
  representative              Representative[]
}

model Representative {
  id                  String                @id @default(uuid())
  positionTitle       String
  personId            String                @unique
  grantorId           String
  person              Person                @relation(fields: [personId], references: [id])
  grantor             Grantor               @relation(fields: [grantorId], references: [id])
  representativeGrant RepresentativeGrant[]
}

model Grant {
  id                      String                @id @default(uuid())
  name                    String                @unique
  status                  String
  amountRequested         Float
  amountAwarded           Float                 @default(0)
  purpose                 String //specific area or general
  startDate               DateTime
  endDate                 DateTime
  isMultipleYears         Boolean
  quarter                 String
  acknowledgementSent     Boolean
  awardNotificationDate   DateTime?
  fundingArea             String //specific area or general
  internalProposalDueDate DateTime?
  proposalDueDate         DateTime
  proposalSummary         String?
  proposalSubmissionDate  DateTime?
  applicationType         String
  internalOwner           String
  fundingRestriction      String?
  matchingRequirement     String?
  useArea                 String //specific area or general
  isEligibleForRenewal    Boolean
  renewalApplicationDate  DateTime?
  renewalAwardStatus      String?
  representativeGrant     RepresentativeGrant[]
  grantAttachment         GrantAttachment[]
}

model GrantAttachment {
  id       String @id @default(uuid())
  grantId  String
  document String
  Grant    Grant  @relation(fields: [grantId], references: [id])
}

model RepresentativeGrant {
  grantId          String
  representativeId String
  grant            Grant          @relation(fields: [grantId], references: [id])
  representative   Representative @relation(fields: [representativeId], references: [id])

  @@id([grantId, representativeId])
}

// Donation Related
model Donor {
  id                      String        @id @default(uuid())
  type                    String
  communicationPreference String
  status                  String
  notes                   String
  isRetained              Boolean
  donation                Donation[]
  personId                String?       @unique
  person                  Person?       @relation(fields: [personId], references: [id])
  organizationId          String?       @unique
  organization            Organization? @relation(fields: [organizationId], references: [id])
}

model Donation {
  id                  String   @id @default(uuid())
  type                String
  amount              Float
  item                String?
  paymentMethod       String?
  campaign            String?
  fundDesignation     String
  recurringFrequency  String?
  date                DateTime
  source              String
  isMatching          Boolean
  taxDeductibleAmount Float?
  receiptSent         Boolean?
  receiptNumber       String?  @default(uuid())
  isAnonymous         Boolean
  acknowledgementSent Boolean
  donorId             String?
  donor               Donor?   @relation(fields: [donorId], references: [id])
}

model Volunteer {
  id            String   @id @default(uuid())
  dateSubmitted DateTime @default(now())

  // Personal Info
  firstName     String
  middleInitial String?
  lastName      String
  addressLine   String
  city          String
  state         String
  zipCode       String
  phoneNumber   String
  emailAddress  String

  // Business or School Info
  businessOrSchoolName String?

  // Volunteer Preferences & Skills
  volunteerPreference String   @default("No preference")
  preferredRoles      String[]
  availability        String[]
  location            String[]
  preferredEvents     String[]

  // Compliance & Requirements
  volunteerApplicationCompleted Boolean @default(false)
  backgroundCheckCompleted      Boolean @default(false)
  codeOfEthicsFormSigned        Boolean @default(false)
  abuseNeglectReportFormSigned  Boolean @default(false)
  personnelPoliciesFormSigned   Boolean @default(false)
  orientationCompleted          Boolean @default(false)
  trainingModulesCompleted      Boolean @default(false)

  // Volunteer Events & Hours
  volunteerEvents  Event[]
  eventHoursLogged EventHour[]

  // Relations
  application         VolunteerApplication? @relation(fields: [applicationId], references: [id])
  applicationId       String?
  EmergencyContact    EmergencyContact?
  VolunteerAttendance VolunteerAttendance[]
  EventRegistration   EventRegistration[]
  MailRecipient       MailRecipient[]
}

model EventHour {
  id             String    @id @default(uuid())
  volunteerId    String
  eventId        String
  loginTime      DateTime
  logoutTime     DateTime
  volunteer      Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerEvent Event     @relation(fields: [eventId], references: [id])
}

model EmergencyContact {
  id           String    @id @default(uuid())
  name         String
  relationship String
  phoneNumber  String
  volunteerId  String    @unique
  volunteer    Volunteer @relation(fields: [volunteerId], references: [id])
}

model VolunteerAttendance {
  id           String    @id @default(uuid())
  hoursWorked  Float
  checkInTime  DateTime
  checkOutTime DateTime
  volunteerId  String
  volunteer    Volunteer @relation(fields: [volunteerId], references: [id])
  eventId      String
  event        Event     @relation(fields: [eventId], references: [id])
}

model VolunteerApplication {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  dateSubmitted DateTime?

  legalName      String
  maidenName     String?
  ssn            String
  preferredName  String?
  currentAddress String
  phoneNumber    String
  email          String

  usCitizen      Boolean
  driversLicense Boolean
  ownCar         Boolean
  speakSpanish   Boolean
  otherLanguages String?

  heardAbout String?

  emergencyContactName  String
  emergencyContactPhone String

  professionalRefName  String
  professionalRefPhone String

  personalRefName  String
  personalRefPhone String

  educationLevel String
  highSchoolName String?
  collegeName    String?
  degreeObtained String?

  additionalInfo1       String?
  additionalInfo2       String?
  arrestedOrConvicted   Boolean
  convictionExplanation String?

  agreedToTerms Boolean
  eSignature    String

  volunteer Volunteer[]
}

model Event {
  id                   String                @id @default(uuid())
  name                 String
  schedule             DateTime
  description          String
  locationId           String?
  location             Location?             @relation(fields: [locationId], references: [id])
  volunteerAttendances VolunteerAttendance[]
  eventRegistrations   EventRegistration[]
  Volunteer            Volunteer?            @relation(fields: [volunteerId], references: [id])
  volunteerId          String?
  EventHour            EventHour[]
}

model EventRegistration {
  id                    String    @id @default(uuid())
  eventGroup            String
  date                  DateTime
  referrelSource        String
  reasonForVolunteering String
  eSignature            String
  volunteerId           String
  volunteer             Volunteer @relation(fields: [volunteerId], references: [id])
  eventId               String
  event                 Event     @relation(fields: [eventId], references: [id])
}

model Location {
  id           String  @id @default(uuid())
  name         String
  address      String
  city         String
  state        String
  zipCode      String
  phoneNumber  String
  emailAddress String
  hours        String
  events       Event[]
  admins       Admin[]
}

model Admin {
  id         String   @id @default(uuid())
  username   String
  password   String
  firstName  String
  lastName   String
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  mails      Mail[]
}

model Mail {
  id                String          @id @default(uuid())
  subjectLine       String
  body              String
  creationDateTime  DateTime
  scheduledDateTime DateTime
  attachments       String[] // Changed to array of strings
  adminId           String
  admin             Admin           @relation(fields: [adminId], references: [id])
  mailRecipients    MailRecipient[]
}

model MailRecipient {
  id             String         @id @default(uuid())
  recipientType  RecipientType
  deliveryStatus DeliveryStatus
  volunteerId    String
  volunteer      Volunteer      @relation(fields: [volunteerId], references: [id])
  mailId         String
  mail           Mail           @relation(fields: [mailId], references: [id])
}

enum RecipientType {
  PRIMARY
  CC
  BCC
}

enum DeliveryStatus {
  PENDING
  SENT
  FAILED
}
