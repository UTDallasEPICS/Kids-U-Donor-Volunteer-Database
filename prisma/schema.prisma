generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Person {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String          @unique
  phoneNumber    String?         @unique
  donor          Donor?
  representative Representative?
  address        Address?
}

model Grantor {
  id                          String           @id @default(uuid())
  websiteLink                 String?
  addressId                   String
  name                        String           @unique
  contactTitle                String
  type                        String
  communicationPreference     String
  recognitionPreference       String
  internalRelationshipManager String
  representative              Representative[]
  address                     Address          @relation(fields: [id], references: [id])
}

model Representative {
  id                  String                @id @default(uuid())
  positionTitle       String
  personId            String                @unique
  grantorId           String
  person              Person                @relation(fields: [personId], references: [id])
  grantor             Grantor               @relation(fields: [grantorId], references: [id])
  representativeGrant RepresentativeGrant[]
}

//working on this still
model Grant {
  id                         String    @id @default(uuid())
  name                       String    @unique
  status                     String
  amountRequested            Float
  amountAwarded              Float
  purpose                    String
  startDate                  DateTime
  endDate                    DateTime
  isMultipleYears            Boolean
  quarter                    String
  proposalSubmissionDate     DateTime
  awardNotificationDate      DateTime
  //
  internalProposalDueDate    DateTime
  proposalDueDate            DateTime
  proposalSummary            String
  applicationType            String
  internalOwner              String
  requiredAttachment         String
  //
  fundingRestriction         String?
  matchingRequirement        String?
  useArea                    String
  //
  finalReportDueDate         String
  programImpact              String
  complianceRequirement      String
  isSiteVisitRequired        Boolean
  siteVisitDate              DateTime?
  //
  budgetAllocation           String
  totalExpensesIncurred      Float
  remainingBalance           Float
  auditRequirement           String?
  //
  isEligibleForRenewal       Boolean
  renewalApplicationDate     DateTime
  renewalAwardStatus         String
  futureFundingOpportunities String
  //
  programAlignment           String
  proposalReviewDate         DateTime
  reportReviewDate           DateTime

  representativeGrant RepresentativeGrant[]
  GrantExpense        GrantExpense[]
}

model GrantExpense {
  id      String @id @default(uuid())
  grantId String
  amount  Float
  grant   Grant  @relation(fields: [grantId], references: [id])
}

model RepresentativeGrant {
  grantId          String
  representativeId String
  grant            Grant          @relation(fields: [grantId], references: [id])
  representative   Representative @relation(fields: [representativeId], references: [id])

  @@id([grantId, representativeId])
}

// Donation Related
model Donor {
  id                      String     @id @default(uuid())
  type                    String
  communicationPreference String
  status                  String
  notes                   String
  personId                String     @unique
  donation                Donation[]
  person                  Person     @relation(fields: [personId], references: [id])
}

model Address {
  id           String    @id @default(uuid())
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zipCode      String
  type         String
  personId     String    @unique
  person       Person    @relation(fields: [personId], references: [id])
  Grantor      Grantor[]
}

model Donation {
  id                 String   @id @default(uuid())
  type               String
  amount             Float?
  item               String?
  paymentMethod      String?
  campaign           String
  date               DateTime
  fundDesignation    String
  recurringFrequency String?
  source             String
  isMatching         Boolean
  donorId            String   @unique
  donor              Donor    @relation(fields: [donorId], references: [id])
}
