generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Constituent {
  ConstituentID     String         @id @default(uuid())
  FirstName         String
  LastName          String
  StreetAddress     String
  City              String
  State             String
  Zipcode           String
  Country           String
  EmailAddress      String         @unique
  PhoneNumber       String?        @unique
  AreaCode          String?
  //Donors            Donor[]
  Volunteers        Volunteer[]
}

model Volunteer {
  VolunteerID         String           @id @default(uuid())
  DOB                 DateTime
  Age                 Int
  EmergencyContact    String?
  EventsAttended      String[]
  AgreementToMediaUse Boolean?
  TrainingCompletion  String?
  BackgroundCheckCompletion     Boolean?
  IsOverEighteen        Boolean?
  ConstituentID       String
  Constituent         Constituent      @relation(fields: [ConstituentID], references: [ConstituentID])
  VolunteerEvents     VolunteerEvent[]
}

model Organization {
  OrganizationID            String         @id @default(uuid())
  WebsiteForFunder          String?
  StreetAddress             String
  City                      String
  State                     String
  Zipcode                   String
  Country                   String
  OrganizationName          String      @unique
  PortalForGrantApplication String?
  NotesAboutLoginInfo       String?
  Representative            Representative[]
  
}

model Representative{

  ID                        String         @id @default(uuid())
  FirstName                 String
  LastName                  String
  Email                     String      @unique
  Phone                     String?     @unique
  PositionInCompany         String
  Grants                    Grant[]
  OrganizationID            String
  Organization              Organization  @relation(fields: [OrganizationID], references: [OrganizationID])
}

model Grant {

  GrantID                 String          @id @default(uuid())
  GrantName               String       @unique
  AwardStatus             String
  GrantDueDate            DateTime
  ContactType             String
  FundingAreas            String[]
  KidsUProgram            String[]
  GrantOpeningDates       DateTime[]
  AskDate                 DateTime?
  AwardDate               DateTime?
  ReportingDates          DateTime[]
  TypeOfReporting         String?
  DateToReapplyForGrant   DateTime?
  WaitingPeriodToReapply  Int?
  FundingRestrictions     String?
  AskAmount               Float
  AmountAwarded           Float
  EndOfGrantReportDueDate DateTime
  Representative          Representative[]
}

model Event {
  EventID            String             @id @default(uuid())
  NameOfEvent        String
  Date               DateTime
  Time               DateTime
  VolunteersAttended VolunteerEvent[]
}

model VolunteerEvent {
  ID          String      @id @default(uuid())
  VolunteerID String
  EventID     String
  LoginTime   DateTime
  LogoutTime  DateTime
  LoggedHours Int
  Event       Event     @relation(fields: [EventID], references: [EventID])
  Volunteer   Volunteer @relation(fields: [VolunteerID], references: [VolunteerID])
}

// Donation Related
model Donor {
  id String @id @default(uuid())   
  name String
  type String // Individual, Corporate, Foundation, etc...
  address Address?
  phone String
  email String
  contactMethod String // Email, Phone, Mail
  status String // Active, Lapsed, Major Donor, First-Time, etc...
  notes String // 
  donations Donation[]
}

model Address {
  id String @id @default(uuid())
  street String
  city String
  state String
  zip String
  donorId String @unique
  donor Donor @relation(fields: [donorId], references: [id])
}

model Donation {
  id String  @id @default(uuid())
  type String
  amount Float?
  item String?
  paymentMethod String
  campaign String
  fund String
  recurrenceFrequency String
  source String
  isMatching Boolean
  date DateTime
  donorId String @unique
  donor Donor @relation(fields: [donorId], references: [id])
}